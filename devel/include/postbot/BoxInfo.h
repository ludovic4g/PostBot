// Generated by gencpp from file postbot/BoxInfo.msg
// DO NOT EDIT!


#ifndef POSTBOT_MESSAGE_BOXINFO_H
#define POSTBOT_MESSAGE_BOXINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace postbot
{
template <class ContainerAllocator>
struct BoxInfo_
{
  typedef BoxInfo_<ContainerAllocator> Type;

  BoxInfo_()
    : colors()
    , x()
    , y()
    , status()  {
    }
  BoxInfo_(const ContainerAllocator& _alloc)
    : colors(_alloc)
    , x(_alloc)
    , y(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _colors_type;
  _colors_type colors;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _x_type;
  _x_type x;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _y_type;
  _y_type y;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::postbot::BoxInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::postbot::BoxInfo_<ContainerAllocator> const> ConstPtr;

}; // struct BoxInfo_

typedef ::postbot::BoxInfo_<std::allocator<void> > BoxInfo;

typedef boost::shared_ptr< ::postbot::BoxInfo > BoxInfoPtr;
typedef boost::shared_ptr< ::postbot::BoxInfo const> BoxInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::postbot::BoxInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::postbot::BoxInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::postbot::BoxInfo_<ContainerAllocator1> & lhs, const ::postbot::BoxInfo_<ContainerAllocator2> & rhs)
{
  return lhs.colors == rhs.colors &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::postbot::BoxInfo_<ContainerAllocator1> & lhs, const ::postbot::BoxInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace postbot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::postbot::BoxInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::postbot::BoxInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::postbot::BoxInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::postbot::BoxInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::postbot::BoxInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::postbot::BoxInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::postbot::BoxInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d695438bc8e2030477534c7599a981b";
  }

  static const char* value(const ::postbot::BoxInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d695438bc8e2030ULL;
  static const uint64_t static_value2 = 0x477534c7599a981bULL;
};

template<class ContainerAllocator>
struct DataType< ::postbot::BoxInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "postbot/BoxInfo";
  }

  static const char* value(const ::postbot::BoxInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::postbot::BoxInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] colors\n"
"float32[] x\n"
"float32[] y\n"
"int32[] status\n"
;
  }

  static const char* value(const ::postbot::BoxInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::postbot::BoxInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.colors);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoxInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::postbot::BoxInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::postbot::BoxInfo_<ContainerAllocator>& v)
  {
    s << indent << "colors[]" << std::endl;
    for (size_t i = 0; i < v.colors.size(); ++i)
    {
      s << indent << "  colors[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.colors[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSTBOT_MESSAGE_BOXINFO_H
